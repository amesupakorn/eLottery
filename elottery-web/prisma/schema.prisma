// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum EntryType {
  DEPOSIT
  PURCHASE
  WITHDRAWAL
  REFUND
  PRIZE
}

enum Direction {
  CREDIT
  DEBIT
}

enum TicketPurchaseStatus {
  HELD
  OWNED
  CANCELED
}

enum DrawStatus {
  SCHEDULED
  LOCKED
  DRAWING
  PUBLISHED
  CLOSED
}


model User {
  id          Int         @id @default(autoincrement())
  email       String?     @unique @db.VarChar(255)
  full_name   String?     @db.VarChar(255)
  status      UserStatus  @default(ACTIVE)
  created_at  DateTime    @default(now())
  cognito_sub String?    @unique
  Wallet      Wallet?
  @@map("users")
}

model Wallet {
  id         Int        @id @default(autoincrement())
  user_id    Int        @unique
  currency   String     @db.Char(3)
  balance    Decimal    @default(0) @db.Decimal(18, 2)
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())

  user       User       @relation(fields: [user_id], references: [id])
  ledger     AccountTransaction[]

  @@map("wallets")
}

model AccountTransaction {
  id            Int        @id @default(autoincrement())
  wallet_id     Int
  entry_type    EntryType
  ref_code      String?    @db.VarChar(40)
  amount        Decimal    @db.Decimal(18, 2)
  direction     Direction
  balance_after Decimal?   @db.Decimal(18, 2)
  occurred_at   DateTime   @default(now())
  note          String?    @db.VarChar(255)

  wallet Wallet @relation(fields: [wallet_id], references: [id])

  @@index([wallet_id, occurred_at])
  @@map("account_transaction")
}

/* ===== Ticket (running number table) ===== */
model Ticket {
  name       String   @id @db.VarChar(32)
  prefix     String   @db.VarChar(8)
  period     String   @db.Char(4)
  last_no    Int
  width      Int
  updated_at DateTime @default(now())

  @@map("ticket")
}

/* ===== Ticket Purchases ===== */
model TicketPurchase {
  id            Int      @id @default(autoincrement())
  ticket_number String   @db.VarChar(32)
  unit_price    Decimal  @db.Decimal(18, 2)
  total_price   Decimal  @db.Decimal(18, 2)
  status        TicketPurchaseStatus

  user_id       Int
  wallet_id     Int
  draw_id       Int      // งวดที่สลากนี้ร่วมลุ้น

  // (optional) index
  @@index([draw_id, ticket_number])
  @@index([user_id])
  @@index([wallet_id])

  @@map("ticket_purchases")
}

model Draw {
  id           Int         @id @default(autoincrement())
  draw_code    String      @unique @db.VarChar(32)
  product_name String?     @db.VarChar(128)
  status       DrawStatus
  created_at   DateTime    @default(now())

  prizeTiers   PrizeTier[]
  results      DrawResult[]

  @@map("draws")
}
model PrizeTier { // ระดับรางวัลของงวด
  id            Int      @id @default(autoincrement())
  draw_id       Int
  tier_name     String   @db.VarChar(64)
  prize_amount  Decimal  @db.Decimal(18, 2)
  winners_count Int

  draw Draw @relation(fields: [draw_id], references: [id])

  @@map("prize_tiers")
  DrawResult DrawResult[]
}

model DrawResult {
  id               Int      @id @default(autoincrement())
  draw_id          Int
  prize_tier_id    Int
  entry_id         Int?
  user_id          Int?
  purchase_item_id Int?
  ticket_number    String?  @db.VarChar(32)
  prize_amount     Decimal  @db.Decimal(18, 2)
  published_at     DateTime @default(now())

  draw      Draw      @relation(fields: [draw_id], references: [id])
  prizeTier PrizeTier @relation(fields: [prize_tier_id], references: [id])

  @@index([draw_id])
  @@index([prize_tier_id])
  @@map("draw_results")
}